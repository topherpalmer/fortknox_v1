type User @aws_cognito_user_pools {
  id: ID!
  type: String
  name: String
  email: String
  status: String
  profile: Profile
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  userProfileId: ID
}

type Profile @aws_cognito_user_pools {
  id: ID!
  type: String
  name: String
  businessName: String
  accounts(filter: ModelAccountFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAccountConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Account @aws_cognito_user_pools {
  id: ID!
  routingNumber: String
  achNumber: String
  accountNumber: String
  name: String
  bankName: String
  bank: Bank
  profileId: ID!
  status: String
  associatedEmail: String
  address: Address
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  accountBankId: ID
  accountAddressId: ID
}

type Bank @aws_cognito_user_pools {
  id: ID!
  name: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type TrxnAgreement @aws_cognito_user_pools {
  id: ID!
  status: String
  txnAmount: String
  dateToSend: AWSDateTime
  senderProfileAccount: Account
  receiverProfileAccount: Account
  senderUserId: ID
  receiverUserId: ID
  senderUserName: String
  receiverUserName: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  trxnAgreementSenderProfileAccountId: ID
  trxnAgreementReceiverProfileAccountId: ID
}

type Address @aws_cognito_user_pools {
  id: ID!
  status: String
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zip: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_cognito_user_pools {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  type: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  status: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  _deleted: ModelBooleanInput
  userProfileId: ModelIDInput
}

type Query {
  getUser(id: ID!): User @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_cognito_user_pools
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_cognito_user_pools
  getProfile(id: ID!): Profile @aws_cognito_user_pools
  listProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection @aws_cognito_user_pools
  syncProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelProfileConnection @aws_cognito_user_pools
  getAccount(id: ID!): Account @aws_cognito_user_pools
  listAccounts(filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection @aws_cognito_user_pools
  syncAccounts(filter: ModelAccountFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAccountConnection @aws_cognito_user_pools
  accountsByProfileId(profileId: ID!, sortDirection: ModelSortDirection, filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection @aws_cognito_user_pools
  getBank(id: ID!): Bank @aws_cognito_user_pools
  listBanks(filter: ModelBankFilterInput, limit: Int, nextToken: String): ModelBankConnection @aws_cognito_user_pools
  syncBanks(filter: ModelBankFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelBankConnection @aws_cognito_user_pools
  getTrxnAgreement(id: ID!): TrxnAgreement @aws_cognito_user_pools
  listTrxnAgreements(filter: ModelTrxnAgreementFilterInput, limit: Int, nextToken: String): ModelTrxnAgreementConnection @aws_cognito_user_pools
  syncTrxnAgreements(filter: ModelTrxnAgreementFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTrxnAgreementConnection @aws_cognito_user_pools
  getAddress(id: ID!): Address @aws_cognito_user_pools
  listAddresses(filter: ModelAddressFilterInput, limit: Int, nextToken: String): ModelAddressConnection @aws_cognito_user_pools
  syncAddresses(filter: ModelAddressFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAddressConnection @aws_cognito_user_pools
}

input ModelUserConditionInput {
  type: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  status: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  userProfileId: ModelIDInput
}

input CreateUserInput {
  id: ID
  type: String
  name: String
  email: String
  status: String
  _version: Int
  userProfileId: ID
}

input UpdateUserInput {
  id: ID!
  type: String
  name: String
  email: String
  status: String
  _version: Int
  userProfileId: ID
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools
  createProfile(input: CreateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_cognito_user_pools
  updateProfile(input: UpdateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_cognito_user_pools
  deleteProfile(input: DeleteProfileInput!, condition: ModelProfileConditionInput): Profile @aws_cognito_user_pools
  createAccount(input: CreateAccountInput!, condition: ModelAccountConditionInput): Account @aws_cognito_user_pools
  updateAccount(input: UpdateAccountInput!, condition: ModelAccountConditionInput): Account @aws_cognito_user_pools
  deleteAccount(input: DeleteAccountInput!, condition: ModelAccountConditionInput): Account @aws_cognito_user_pools
  createBank(input: CreateBankInput!, condition: ModelBankConditionInput): Bank @aws_cognito_user_pools
  updateBank(input: UpdateBankInput!, condition: ModelBankConditionInput): Bank @aws_cognito_user_pools
  deleteBank(input: DeleteBankInput!, condition: ModelBankConditionInput): Bank @aws_cognito_user_pools
  createTrxnAgreement(input: CreateTrxnAgreementInput!, condition: ModelTrxnAgreementConditionInput): TrxnAgreement @aws_cognito_user_pools
  updateTrxnAgreement(input: UpdateTrxnAgreementInput!, condition: ModelTrxnAgreementConditionInput): TrxnAgreement @aws_cognito_user_pools
  deleteTrxnAgreement(input: DeleteTrxnAgreementInput!, condition: ModelTrxnAgreementConditionInput): TrxnAgreement @aws_cognito_user_pools
  createAddress(input: CreateAddressInput!, condition: ModelAddressConditionInput): Address @aws_cognito_user_pools
  updateAddress(input: UpdateAddressInput!, condition: ModelAddressConditionInput): Address @aws_cognito_user_pools
  deleteAddress(input: DeleteAddressInput!, condition: ModelAddressConditionInput): Address @aws_cognito_user_pools
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  type: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  _deleted: ModelBooleanInput
  userProfileId: ModelSubscriptionIDInput
}

type Subscription {
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"]) @aws_cognito_user_pools
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"]) @aws_cognito_user_pools
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"]) @aws_cognito_user_pools
  onCreateProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_subscribe(mutations: ["createProfile"]) @aws_cognito_user_pools
  onUpdateProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_subscribe(mutations: ["updateProfile"]) @aws_cognito_user_pools
  onDeleteProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_subscribe(mutations: ["deleteProfile"]) @aws_cognito_user_pools
  onCreateAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["createAccount"]) @aws_cognito_user_pools
  onUpdateAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["updateAccount"]) @aws_cognito_user_pools
  onDeleteAccount(filter: ModelSubscriptionAccountFilterInput): Account @aws_subscribe(mutations: ["deleteAccount"]) @aws_cognito_user_pools
  onCreateBank(filter: ModelSubscriptionBankFilterInput): Bank @aws_subscribe(mutations: ["createBank"]) @aws_cognito_user_pools
  onUpdateBank(filter: ModelSubscriptionBankFilterInput): Bank @aws_subscribe(mutations: ["updateBank"]) @aws_cognito_user_pools
  onDeleteBank(filter: ModelSubscriptionBankFilterInput): Bank @aws_subscribe(mutations: ["deleteBank"]) @aws_cognito_user_pools
  onCreateTrxnAgreement(filter: ModelSubscriptionTrxnAgreementFilterInput): TrxnAgreement @aws_subscribe(mutations: ["createTrxnAgreement"]) @aws_cognito_user_pools
  onUpdateTrxnAgreement(filter: ModelSubscriptionTrxnAgreementFilterInput): TrxnAgreement @aws_subscribe(mutations: ["updateTrxnAgreement"]) @aws_cognito_user_pools
  onDeleteTrxnAgreement(filter: ModelSubscriptionTrxnAgreementFilterInput): TrxnAgreement @aws_subscribe(mutations: ["deleteTrxnAgreement"]) @aws_cognito_user_pools
  onCreateAddress(filter: ModelSubscriptionAddressFilterInput): Address @aws_subscribe(mutations: ["createAddress"]) @aws_cognito_user_pools
  onUpdateAddress(filter: ModelSubscriptionAddressFilterInput): Address @aws_subscribe(mutations: ["updateAddress"]) @aws_cognito_user_pools
  onDeleteAddress(filter: ModelSubscriptionAddressFilterInput): Address @aws_subscribe(mutations: ["deleteAddress"]) @aws_cognito_user_pools
}

type ModelProfileConnection @aws_cognito_user_pools {
  items: [Profile]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelProfileFilterInput {
  id: ModelIDInput
  type: ModelStringInput
  name: ModelStringInput
  businessName: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelProfileFilterInput]
  or: [ModelProfileFilterInput]
  not: ModelProfileFilterInput
  _deleted: ModelBooleanInput
}

input ModelProfileConditionInput {
  type: ModelStringInput
  name: ModelStringInput
  businessName: ModelStringInput
  and: [ModelProfileConditionInput]
  or: [ModelProfileConditionInput]
  not: ModelProfileConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateProfileInput {
  id: ID
  type: String
  name: String
  businessName: String
  _version: Int
}

input UpdateProfileInput {
  id: ID!
  type: String
  name: String
  businessName: String
  _version: Int
}

input DeleteProfileInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionProfileFilterInput {
  id: ModelSubscriptionIDInput
  type: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  businessName: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionProfileFilterInput]
  or: [ModelSubscriptionProfileFilterInput]
  _deleted: ModelBooleanInput
}

type ModelAccountConnection @aws_cognito_user_pools {
  items: [Account]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAccountFilterInput {
  id: ModelIDInput
  routingNumber: ModelStringInput
  achNumber: ModelStringInput
  accountNumber: ModelStringInput
  name: ModelStringInput
  bankName: ModelStringInput
  profileId: ModelIDInput
  status: ModelStringInput
  associatedEmail: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelAccountFilterInput]
  or: [ModelAccountFilterInput]
  not: ModelAccountFilterInput
  _deleted: ModelBooleanInput
  accountBankId: ModelIDInput
  accountAddressId: ModelIDInput
}

input ModelAccountConditionInput {
  routingNumber: ModelStringInput
  achNumber: ModelStringInput
  accountNumber: ModelStringInput
  name: ModelStringInput
  bankName: ModelStringInput
  profileId: ModelIDInput
  status: ModelStringInput
  associatedEmail: ModelStringInput
  and: [ModelAccountConditionInput]
  or: [ModelAccountConditionInput]
  not: ModelAccountConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  accountBankId: ModelIDInput
  accountAddressId: ModelIDInput
}

input CreateAccountInput {
  id: ID
  routingNumber: String
  achNumber: String
  accountNumber: String
  name: String
  bankName: String
  profileId: ID!
  status: String
  associatedEmail: String
  _version: Int
  accountBankId: ID
  accountAddressId: ID
}

input UpdateAccountInput {
  id: ID!
  routingNumber: String
  achNumber: String
  accountNumber: String
  name: String
  bankName: String
  profileId: ID
  status: String
  associatedEmail: String
  _version: Int
  accountBankId: ID
  accountAddressId: ID
}

input DeleteAccountInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAccountFilterInput {
  id: ModelSubscriptionIDInput
  routingNumber: ModelSubscriptionStringInput
  achNumber: ModelSubscriptionStringInput
  accountNumber: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  bankName: ModelSubscriptionStringInput
  profileId: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  associatedEmail: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionAccountFilterInput]
  or: [ModelSubscriptionAccountFilterInput]
  _deleted: ModelBooleanInput
  accountBankId: ModelSubscriptionIDInput
  accountAddressId: ModelSubscriptionIDInput
}

type ModelBankConnection @aws_cognito_user_pools {
  items: [Bank]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelBankFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelBankFilterInput]
  or: [ModelBankFilterInput]
  not: ModelBankFilterInput
  _deleted: ModelBooleanInput
}

input ModelBankConditionInput {
  name: ModelStringInput
  and: [ModelBankConditionInput]
  or: [ModelBankConditionInput]
  not: ModelBankConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateBankInput {
  id: ID
  name: String
  _version: Int
}

input UpdateBankInput {
  id: ID!
  name: String
  _version: Int
}

input DeleteBankInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionBankFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionBankFilterInput]
  or: [ModelSubscriptionBankFilterInput]
  _deleted: ModelBooleanInput
}

type ModelTrxnAgreementConnection @aws_cognito_user_pools {
  items: [TrxnAgreement]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTrxnAgreementFilterInput {
  id: ModelIDInput
  status: ModelStringInput
  txnAmount: ModelStringInput
  dateToSend: ModelStringInput
  senderUserId: ModelIDInput
  receiverUserId: ModelIDInput
  senderUserName: ModelStringInput
  receiverUserName: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTrxnAgreementFilterInput]
  or: [ModelTrxnAgreementFilterInput]
  not: ModelTrxnAgreementFilterInput
  _deleted: ModelBooleanInput
  trxnAgreementSenderProfileAccountId: ModelIDInput
  trxnAgreementReceiverProfileAccountId: ModelIDInput
}

input ModelTrxnAgreementConditionInput {
  status: ModelStringInput
  txnAmount: ModelStringInput
  dateToSend: ModelStringInput
  senderUserId: ModelIDInput
  receiverUserId: ModelIDInput
  senderUserName: ModelStringInput
  receiverUserName: ModelStringInput
  and: [ModelTrxnAgreementConditionInput]
  or: [ModelTrxnAgreementConditionInput]
  not: ModelTrxnAgreementConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  trxnAgreementSenderProfileAccountId: ModelIDInput
  trxnAgreementReceiverProfileAccountId: ModelIDInput
}

input CreateTrxnAgreementInput {
  id: ID
  status: String
  txnAmount: String
  dateToSend: AWSDateTime
  senderUserId: ID
  receiverUserId: ID
  senderUserName: String
  receiverUserName: String
  _version: Int
  trxnAgreementSenderProfileAccountId: ID
  trxnAgreementReceiverProfileAccountId: ID
}

input UpdateTrxnAgreementInput {
  id: ID!
  status: String
  txnAmount: String
  dateToSend: AWSDateTime
  senderUserId: ID
  receiverUserId: ID
  senderUserName: String
  receiverUserName: String
  _version: Int
  trxnAgreementSenderProfileAccountId: ID
  trxnAgreementReceiverProfileAccountId: ID
}

input DeleteTrxnAgreementInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionTrxnAgreementFilterInput {
  id: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  txnAmount: ModelSubscriptionStringInput
  dateToSend: ModelSubscriptionStringInput
  senderUserId: ModelSubscriptionIDInput
  receiverUserId: ModelSubscriptionIDInput
  senderUserName: ModelSubscriptionStringInput
  receiverUserName: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTrxnAgreementFilterInput]
  or: [ModelSubscriptionTrxnAgreementFilterInput]
  _deleted: ModelBooleanInput
  trxnAgreementSenderProfileAccountId: ModelSubscriptionIDInput
  trxnAgreementReceiverProfileAccountId: ModelSubscriptionIDInput
}

type ModelAddressConnection @aws_cognito_user_pools {
  items: [Address]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAddressFilterInput {
  id: ModelIDInput
  status: ModelStringInput
  addressLine1: ModelStringInput
  addressLine2: ModelStringInput
  city: ModelStringInput
  state: ModelStringInput
  zip: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelAddressFilterInput]
  or: [ModelAddressFilterInput]
  not: ModelAddressFilterInput
  _deleted: ModelBooleanInput
}

input ModelAddressConditionInput {
  status: ModelStringInput
  addressLine1: ModelStringInput
  addressLine2: ModelStringInput
  city: ModelStringInput
  state: ModelStringInput
  zip: ModelStringInput
  and: [ModelAddressConditionInput]
  or: [ModelAddressConditionInput]
  not: ModelAddressConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateAddressInput {
  id: ID
  status: String
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zip: String
  _version: Int
}

input UpdateAddressInput {
  id: ID!
  status: String
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zip: String
  _version: Int
}

input DeleteAddressInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAddressFilterInput {
  id: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  addressLine1: ModelSubscriptionStringInput
  addressLine2: ModelSubscriptionStringInput
  city: ModelSubscriptionStringInput
  state: ModelSubscriptionStringInput
  zip: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionAddressFilterInput]
  or: [ModelSubscriptionAddressFilterInput]
  _deleted: ModelBooleanInput
}
