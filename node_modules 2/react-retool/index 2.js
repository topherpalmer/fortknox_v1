"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var MINIMUM_SANDBOX_PERMISSIONS = "allow-scripts allow-same-origin";
var Retool = function Retool(_ref) {
  var data = _ref.data,
    url = _ref.url,
    height = _ref.height,
    width = _ref.width,
    onData = _ref.onData,
    sandbox = _ref.sandbox,
    allow = _ref.allow,
    styling = _ref.styling;
  var embeddedIframe = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)({}),
    _useState2 = _slicedToArray(_useState, 2),
    elementWatchers = _useState2[0],
    setElementWatchers = _useState2[1];

  /* Retool passes up the list of elements to watch on page load  */
  (0, _react.useEffect)(function () {
    for (var key in elementWatchers) {
      var _watcher$iframe;
      var watcher = elementWatchers[key];
      (_watcher$iframe = watcher.iframe) === null || _watcher$iframe === void 0 ? void 0 : _watcher$iframe.contentWindow.postMessage({
        type: "PARENT_WINDOW_RESULT",
        result: data[watcher.selector],
        id: watcher.queryId,
        pageName: watcher.pageName
      }, "*");
    }
  }, [data, elementWatchers]);

  /* On page load, add event listener to listen for events from Retool */
  (0, _react.useEffect)(function () {
    // if the URL changes, we want to clear previous set of Element Watchers
    setElementWatchers({});

    /* Handle events - if PWQ then create/replace watchers -> return result */
    var handler = function handler(event) {
      var _embeddedIframe$curre, _event$data, _event$data2;
      if (!(embeddedIframe !== null && embeddedIframe !== void 0 && (_embeddedIframe$curre = embeddedIframe.current) !== null && _embeddedIframe$curre !== void 0 && _embeddedIframe$curre.contentWindow)) return;

      /* Handle messages passed up from Retool */
      if (event.origin === new URL(url).origin && ((_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.type) !== "PARENT_WINDOW_QUERY" && ((_event$data2 = event.data) === null || _event$data2 === void 0 ? void 0 : _event$data2.type) !== "intercom-snippet__ready") {
        onData === null || onData === void 0 ? void 0 : onData(event.data);
      }

      /* Handle requests from Retool looking for data */
      if (event.data.type === "PARENT_WINDOW_QUERY") {
        createOrReplaceWatcher(event.data.selector, event.data.pageName, event.data.id);
        postMessageForSelector("PARENT_WINDOW_RESULT", event.data);
      }
    };
    window.addEventListener("message", handler);
    return function () {
      return window.removeEventListener("message", handler);
    };
  }, [url]);

  /* Creates or updates the list of values for us to watch for changes */
  var createOrReplaceWatcher = function createOrReplaceWatcher(selector, pageName, queryId) {
    var watcherId = pageName + "-" + queryId;
    var updatedState = elementWatchers;
    updatedState[watcherId] = {
      iframe: embeddedIframe.current,
      selector: selector,
      pageName: pageName,
      queryId: queryId
    };
    setElementWatchers(updatedState);
  };

  /* Checks for selectors for data and posts message for Retool to read */
  var postMessageForSelector = function postMessageForSelector(messageType, eventData) {
    var maybeData = data[eventData.selector];
    if (maybeData) {
      embeddedIframe.current.contentWindow.postMessage({
        type: messageType,
        result: maybeData,
        id: eventData.id,
        pageName: eventData.pageName
      }, "*");
    } else {
      console.log("Not sending data back to Retool, nothing found for selector: ".concat(eventData.selector));
    }
  };
  var sandboxAttrib = typeof sandbox === "string" ? "".concat(MINIMUM_SANDBOX_PERMISSIONS, " ").concat(sandbox) : sandbox === true ? MINIMUM_SANDBOX_PERMISSIONS : sandbox;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("iframe", {
    allow: allow,
    sandbox: sandboxAttrib,
    height: height !== null && height !== void 0 ? height : "100%",
    width: width !== null && width !== void 0 ? width : "100%",
    frameBorder: "none",
    src: url,
    ref: embeddedIframe,
    title: "retool",
    style: styling
  });
};
var _default = Retool;
exports.default = _default;