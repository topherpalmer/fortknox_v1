{"ast":null,"code":"import { StorageAction } from '@aws-amplify/core/internals/utils';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError.mjs';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation.mjs';\nimport { logger } from '../../../../utils/logger.mjs';\nimport { validateStorageOperationInput } from '../../utils/validateStorageOperationInput.mjs';\nimport { isInputWithPath } from '../../utils/isInputWithPath.mjs';\nimport '../../utils/client/base.mjs';\nimport '../../utils/client/getObject.mjs';\nimport '../../utils/client/listObjectsV2.mjs';\nimport '../../utils/client/putObject.mjs';\nimport '../../utils/client/createMultipartUpload.mjs';\nimport '../../utils/client/uploadPart.mjs';\nimport '../../utils/client/completeMultipartUpload.mjs';\nimport '../../utils/client/listParts.mjs';\nimport '../../utils/client/abortMultipartUpload.mjs';\nimport { copyObject } from '../../utils/client/copyObject.mjs';\nimport '../../utils/client/headObject.mjs';\nimport '../../utils/client/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../utils/userAgent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst isCopyInputWithPath = input => isInputWithPath(input.source);\nconst copy = async (amplify, input) => {\n  return isCopyInputWithPath(input) ? copyWithPath(amplify, input) : copyWithKey(amplify, input);\n};\nconst copyWithPath = async (amplify, input) => {\n  const {\n    source,\n    destination\n  } = input;\n  const {\n    s3Config,\n    bucket,\n    identityId\n  } = await resolveS3ConfigAndInput(amplify);\n  assertValidationError(!!source.path, StorageValidationErrorCode.NoSourcePath);\n  assertValidationError(!!destination.path, StorageValidationErrorCode.NoDestinationPath);\n  const {\n    objectKey: sourcePath\n  } = validateStorageOperationInput(source, identityId);\n  const {\n    objectKey: destinationPath\n  } = validateStorageOperationInput(destination, identityId);\n  const finalCopySource = `${bucket}/${sourcePath}`;\n  const finalCopyDestination = destinationPath;\n  logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n  await serviceCopy({\n    source: finalCopySource,\n    destination: finalCopyDestination,\n    bucket,\n    s3Config\n  });\n  return {\n    path: finalCopyDestination\n  };\n};\n/** @deprecated Use {@link copyWithPath} instead. */\nconst copyWithKey = async (amplify, input) => {\n  const {\n    source: {\n      key: sourceKey\n    },\n    destination: {\n      key: destinationKey\n    }\n  } = input;\n  assertValidationError(!!sourceKey, StorageValidationErrorCode.NoSourceKey);\n  assertValidationError(!!destinationKey, StorageValidationErrorCode.NoDestinationKey);\n  const {\n    s3Config,\n    bucket,\n    keyPrefix: sourceKeyPrefix\n  } = await resolveS3ConfigAndInput(amplify, input.source);\n  const {\n    keyPrefix: destinationKeyPrefix\n  } = await resolveS3ConfigAndInput(amplify, input.destination); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n  // TODO(ashwinkumar6) V6-logger: warn `You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n  const finalCopySource = `${bucket}/${sourceKeyPrefix}${sourceKey}`;\n  const finalCopyDestination = `${destinationKeyPrefix}${destinationKey}`;\n  logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n  await serviceCopy({\n    source: finalCopySource,\n    destination: finalCopyDestination,\n    bucket,\n    s3Config\n  });\n  return {\n    key: destinationKey\n  };\n};\nconst serviceCopy = async ({\n  source,\n  destination,\n  bucket,\n  s3Config\n}) => {\n  await copyObject({\n    ...s3Config,\n    userAgentValue: getStorageUserAgentValue(StorageAction.Copy)\n  }, {\n    Bucket: bucket,\n    CopySource: source,\n    Key: destination,\n    MetadataDirective: 'COPY' // Copies over metadata like contentType as well\n  });\n};\nexport { copy, copyWithKey };","map":{"version":3,"names":["isCopyInputWithPath","input","isInputWithPath","source","copy","amplify","copyWithPath","copyWithKey","destination","s3Config","bucket","identityId","resolveS3ConfigAndInput","assertValidationError","path","StorageValidationErrorCode","NoSourcePath","NoDestinationPath","objectKey","sourcePath","validateStorageOperationInput","destinationPath","finalCopySource","finalCopyDestination","logger","debug","serviceCopy","key","sourceKey","destinationKey","NoSourceKey","NoDestinationKey","keyPrefix","sourceKeyPrefix","destinationKeyPrefix","copyObject","userAgentValue","getStorageUserAgentValue","StorageAction","Copy","Bucket","CopySource","Key","MetadataDirective"],"sources":["/Users/cp/Documents/Documents - Christopherâ€™s MacBook Air/Development/React/fortknox_v1/node_modules/@aws-amplify/storage/src/providers/s3/apis/internal/copy.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { isInputWithPath, resolveS3ConfigAndInput, validateStorageOperationInput, } from '../../utils';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError';\nimport { copyObject } from '../../utils/client';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nconst isCopyInputWithPath = (input) => isInputWithPath(input.source);\nexport const copy = async (amplify, input) => {\n    return isCopyInputWithPath(input)\n        ? copyWithPath(amplify, input)\n        : copyWithKey(amplify, input);\n};\nconst copyWithPath = async (amplify, input) => {\n    const { source, destination } = input;\n    const { s3Config, bucket, identityId } = await resolveS3ConfigAndInput(amplify);\n    assertValidationError(!!source.path, StorageValidationErrorCode.NoSourcePath);\n    assertValidationError(!!destination.path, StorageValidationErrorCode.NoDestinationPath);\n    const { objectKey: sourcePath } = validateStorageOperationInput(source, identityId);\n    const { objectKey: destinationPath } = validateStorageOperationInput(destination, identityId);\n    const finalCopySource = `${bucket}/${sourcePath}`;\n    const finalCopyDestination = destinationPath;\n    logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n    await serviceCopy({\n        source: finalCopySource,\n        destination: finalCopyDestination,\n        bucket,\n        s3Config,\n    });\n    return { path: finalCopyDestination };\n};\n/** @deprecated Use {@link copyWithPath} instead. */\nexport const copyWithKey = async (amplify, input) => {\n    const { source: { key: sourceKey }, destination: { key: destinationKey }, } = input;\n    assertValidationError(!!sourceKey, StorageValidationErrorCode.NoSourceKey);\n    assertValidationError(!!destinationKey, StorageValidationErrorCode.NoDestinationKey);\n    const { s3Config, bucket, keyPrefix: sourceKeyPrefix, } = await resolveS3ConfigAndInput(amplify, input.source);\n    const { keyPrefix: destinationKeyPrefix } = await resolveS3ConfigAndInput(amplify, input.destination); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n    // TODO(ashwinkumar6) V6-logger: warn `You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n    const finalCopySource = `${bucket}/${sourceKeyPrefix}${sourceKey}`;\n    const finalCopyDestination = `${destinationKeyPrefix}${destinationKey}`;\n    logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n    await serviceCopy({\n        source: finalCopySource,\n        destination: finalCopyDestination,\n        bucket,\n        s3Config,\n    });\n    return {\n        key: destinationKey,\n    };\n};\nconst serviceCopy = async ({ source, destination, bucket, s3Config, }) => {\n    await copyObject({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.Copy),\n    }, {\n        Bucket: bucket,\n        CopySource: source,\n        Key: destination,\n        MetadataDirective: 'COPY', // Copies over metadata like contentType as well\n    });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}