{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction isAmplifyOutputs(config) {\n  // version format initially will be '1' but is expected to be something like x.y where x is major and y minor version\n  const {\n    version\n  } = config;\n  if (!version) {\n    return false;\n  }\n  return version.startsWith('1');\n}\nfunction parseStorage(amplifyOutputsStorageProperties) {\n  if (!amplifyOutputsStorageProperties) {\n    return undefined;\n  }\n  const {\n    bucket_name,\n    aws_region\n  } = amplifyOutputsStorageProperties;\n  return {\n    S3: {\n      bucket: bucket_name,\n      region: aws_region\n    }\n  };\n}\nfunction parseAuth(amplifyOutputsAuthProperties) {\n  if (!amplifyOutputsAuthProperties) {\n    return undefined;\n  }\n  const {\n    user_pool_id,\n    user_pool_client_id,\n    identity_pool_id,\n    password_policy,\n    mfa_configuration,\n    mfa_methods,\n    unauthenticated_identities_enabled,\n    oauth,\n    username_attributes,\n    standard_required_attributes\n  } = amplifyOutputsAuthProperties;\n  const authConfig = {\n    Cognito: {\n      userPoolId: user_pool_id,\n      userPoolClientId: user_pool_client_id\n    }\n  };\n  if (identity_pool_id) {\n    authConfig.Cognito = {\n      ...authConfig.Cognito,\n      identityPoolId: identity_pool_id\n    };\n  }\n  if (password_policy) {\n    authConfig.Cognito.passwordFormat = {\n      requireLowercase: password_policy.require_lowercase,\n      requireNumbers: password_policy.require_numbers,\n      requireUppercase: password_policy.require_uppercase,\n      requireSpecialCharacters: password_policy.require_symbols,\n      minLength: password_policy.min_length ?? 6\n    };\n  }\n  if (mfa_configuration) {\n    authConfig.Cognito.mfa = {\n      status: getMfaStatus(mfa_configuration),\n      smsEnabled: mfa_methods?.includes('SMS'),\n      totpEnabled: mfa_methods?.includes('TOTP')\n    };\n  }\n  if (unauthenticated_identities_enabled) {\n    authConfig.Cognito.allowGuestAccess = unauthenticated_identities_enabled;\n  }\n  if (oauth) {\n    authConfig.Cognito.loginWith = {\n      oauth: {\n        domain: oauth.domain,\n        redirectSignIn: oauth.redirect_sign_in_uri,\n        redirectSignOut: oauth.redirect_sign_out_uri,\n        responseType: oauth.response_type === 'token' ? 'token' : 'code',\n        scopes: oauth.scopes,\n        providers: getOAuthProviders(oauth.identity_providers)\n      }\n    };\n  }\n  if (username_attributes?.includes('email')) {\n    authConfig.Cognito.loginWith = {\n      ...authConfig.Cognito.loginWith,\n      email: true\n    };\n  }\n  if (username_attributes?.includes('phone_number')) {\n    authConfig.Cognito.loginWith = {\n      ...authConfig.Cognito.loginWith,\n      phone: true\n    };\n  }\n  if (standard_required_attributes) {\n    authConfig.Cognito.userAttributes = standard_required_attributes.reduce((acc, curr) => ({\n      ...acc,\n      [curr]: {\n        required: true\n      }\n    }), {});\n  }\n  return authConfig;\n}\nfunction parseAnalytics(amplifyOutputsAnalyticsProperties) {\n  if (!amplifyOutputsAnalyticsProperties?.amazon_pinpoint) {\n    return undefined;\n  }\n  const {\n    amazon_pinpoint\n  } = amplifyOutputsAnalyticsProperties;\n  return {\n    Pinpoint: {\n      appId: amazon_pinpoint.app_id,\n      region: amazon_pinpoint.aws_region\n    }\n  };\n}\nfunction parseGeo(amplifyOutputsAnalyticsProperties) {\n  if (!amplifyOutputsAnalyticsProperties) {\n    return undefined;\n  }\n  const {\n    aws_region,\n    geofence_collections,\n    maps,\n    search_indices\n  } = amplifyOutputsAnalyticsProperties;\n  return {\n    LocationService: {\n      region: aws_region,\n      searchIndices: search_indices,\n      geofenceCollections: geofence_collections,\n      maps\n    }\n  };\n}\nfunction parseData(amplifyOutputsDataProperties) {\n  if (!amplifyOutputsDataProperties) {\n    return undefined;\n  }\n  const {\n    aws_region,\n    default_authorization_type,\n    url,\n    api_key,\n    model_introspection\n  } = amplifyOutputsDataProperties;\n  const GraphQL = {\n    endpoint: url,\n    defaultAuthMode: getGraphQLAuthMode(default_authorization_type),\n    region: aws_region,\n    apiKey: api_key,\n    modelIntrospection: model_introspection\n  };\n  return {\n    GraphQL\n  };\n}\nfunction parseNotifications(amplifyOutputsNotificationsProperties) {\n  if (!amplifyOutputsNotificationsProperties) {\n    return undefined;\n  }\n  const {\n    aws_region,\n    channels,\n    amazon_pinpoint_app_id\n  } = amplifyOutputsNotificationsProperties;\n  const hasInAppMessaging = channels.includes('IN_APP_MESSAGING');\n  const hasPushNotification = channels.includes('APNS') || channels.includes('FCM');\n  if (!(hasInAppMessaging || hasPushNotification)) {\n    return undefined;\n  }\n  // At this point, we know the Amplify outputs contains at least one supported channel\n  const notificationsConfig = {};\n  if (hasInAppMessaging) {\n    notificationsConfig.InAppMessaging = {\n      Pinpoint: {\n        appId: amazon_pinpoint_app_id,\n        region: aws_region\n      }\n    };\n  }\n  if (hasPushNotification) {\n    notificationsConfig.PushNotification = {\n      Pinpoint: {\n        appId: amazon_pinpoint_app_id,\n        region: aws_region\n      }\n    };\n  }\n  return notificationsConfig;\n}\nfunction parseAmplifyOutputs(amplifyOutputs) {\n  const resourcesConfig = {};\n  if (amplifyOutputs.storage) {\n    resourcesConfig.Storage = parseStorage(amplifyOutputs.storage);\n  }\n  if (amplifyOutputs.auth) {\n    resourcesConfig.Auth = parseAuth(amplifyOutputs.auth);\n  }\n  if (amplifyOutputs.analytics) {\n    resourcesConfig.Analytics = parseAnalytics(amplifyOutputs.analytics);\n  }\n  if (amplifyOutputs.geo) {\n    resourcesConfig.Geo = parseGeo(amplifyOutputs.geo);\n  }\n  if (amplifyOutputs.data) {\n    resourcesConfig.API = parseData(amplifyOutputs.data);\n  }\n  if (amplifyOutputs.notifications) {\n    resourcesConfig.Notifications = parseNotifications(amplifyOutputs.notifications);\n  }\n  return resourcesConfig;\n}\nconst authModeNames = {\n  AMAZON_COGNITO_USER_POOLS: 'userPool',\n  API_KEY: 'apiKey',\n  AWS_IAM: 'iam',\n  AWS_LAMBDA: 'lambda',\n  OPENID_CONNECT: 'oidc'\n};\nfunction getGraphQLAuthMode(authType) {\n  return authModeNames[authType];\n}\nconst providerNames = {\n  GOOGLE: 'Google',\n  LOGIN_WITH_AMAZON: 'Amazon',\n  FACEBOOK: 'Facebook',\n  SIGN_IN_WITH_APPLE: 'Apple'\n};\nfunction getOAuthProviders(providers = []) {\n  return providers.map(provider => providerNames[provider]);\n}\nfunction getMfaStatus(mfaConfiguration) {\n  if (mfaConfiguration === 'OPTIONAL') return 'optional';\n  if (mfaConfiguration === 'REQUIRED') return 'on';\n  return 'off';\n}\nexport { isAmplifyOutputs, parseAmplifyOutputs, parseAnalytics };","map":{"version":3,"names":["isAmplifyOutputs","config","version","startsWith","parseStorage","amplifyOutputsStorageProperties","undefined","bucket_name","aws_region","S3","bucket","region","parseAuth","amplifyOutputsAuthProperties","user_pool_id","user_pool_client_id","identity_pool_id","password_policy","mfa_configuration","mfa_methods","unauthenticated_identities_enabled","oauth","username_attributes","standard_required_attributes","authConfig","Cognito","userPoolId","userPoolClientId","identityPoolId","passwordFormat","requireLowercase","require_lowercase","requireNumbers","require_numbers","requireUppercase","require_uppercase","requireSpecialCharacters","require_symbols","minLength","min_length","mfa","status","getMfaStatus","smsEnabled","includes","totpEnabled","allowGuestAccess","loginWith","domain","redirectSignIn","redirect_sign_in_uri","redirectSignOut","redirect_sign_out_uri","responseType","response_type","scopes","providers","getOAuthProviders","identity_providers","email","phone","userAttributes","reduce","acc","curr","required","parseAnalytics","amplifyOutputsAnalyticsProperties","amazon_pinpoint","Pinpoint","appId","app_id","parseGeo","geofence_collections","maps","search_indices","LocationService","searchIndices","geofenceCollections","parseData","amplifyOutputsDataProperties","default_authorization_type","url","api_key","model_introspection","GraphQL","endpoint","defaultAuthMode","getGraphQLAuthMode","apiKey","modelIntrospection","parseNotifications","amplifyOutputsNotificationsProperties","channels","amazon_pinpoint_app_id","hasInAppMessaging","hasPushNotification","notificationsConfig","InAppMessaging","PushNotification","parseAmplifyOutputs","amplifyOutputs","resourcesConfig","storage","Storage","auth","Auth","analytics","Analytics","geo","Geo","data","API","notifications","Notifications","authModeNames","AMAZON_COGNITO_USER_POOLS","API_KEY","AWS_IAM","AWS_LAMBDA","OPENID_CONNECT","authType","providerNames","GOOGLE","LOGIN_WITH_AMAZON","FACEBOOK","SIGN_IN_WITH_APPLE","map","provider","mfaConfiguration"],"sources":["/Users/cp/Documents/Documents - Christopherâ€™s MacBook Air/Development/React/fortknox_v1/node_modules/@aws-amplify/core/src/parseAmplifyOutputs.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function isAmplifyOutputs(config) {\n    // version format initially will be '1' but is expected to be something like x.y where x is major and y minor version\n    const { version } = config;\n    if (!version) {\n        return false;\n    }\n    return version.startsWith('1');\n}\nfunction parseStorage(amplifyOutputsStorageProperties) {\n    if (!amplifyOutputsStorageProperties) {\n        return undefined;\n    }\n    const { bucket_name, aws_region } = amplifyOutputsStorageProperties;\n    return {\n        S3: {\n            bucket: bucket_name,\n            region: aws_region,\n        },\n    };\n}\nfunction parseAuth(amplifyOutputsAuthProperties) {\n    if (!amplifyOutputsAuthProperties) {\n        return undefined;\n    }\n    const { user_pool_id, user_pool_client_id, identity_pool_id, password_policy, mfa_configuration, mfa_methods, unauthenticated_identities_enabled, oauth, username_attributes, standard_required_attributes, } = amplifyOutputsAuthProperties;\n    const authConfig = {\n        Cognito: {\n            userPoolId: user_pool_id,\n            userPoolClientId: user_pool_client_id,\n        },\n    };\n    if (identity_pool_id) {\n        authConfig.Cognito = {\n            ...authConfig.Cognito,\n            identityPoolId: identity_pool_id,\n        };\n    }\n    if (password_policy) {\n        authConfig.Cognito.passwordFormat = {\n            requireLowercase: password_policy.require_lowercase,\n            requireNumbers: password_policy.require_numbers,\n            requireUppercase: password_policy.require_uppercase,\n            requireSpecialCharacters: password_policy.require_symbols,\n            minLength: password_policy.min_length ?? 6,\n        };\n    }\n    if (mfa_configuration) {\n        authConfig.Cognito.mfa = {\n            status: getMfaStatus(mfa_configuration),\n            smsEnabled: mfa_methods?.includes('SMS'),\n            totpEnabled: mfa_methods?.includes('TOTP'),\n        };\n    }\n    if (unauthenticated_identities_enabled) {\n        authConfig.Cognito.allowGuestAccess = unauthenticated_identities_enabled;\n    }\n    if (oauth) {\n        authConfig.Cognito.loginWith = {\n            oauth: {\n                domain: oauth.domain,\n                redirectSignIn: oauth.redirect_sign_in_uri,\n                redirectSignOut: oauth.redirect_sign_out_uri,\n                responseType: oauth.response_type === 'token' ? 'token' : 'code',\n                scopes: oauth.scopes,\n                providers: getOAuthProviders(oauth.identity_providers),\n            },\n        };\n    }\n    if (username_attributes?.includes('email')) {\n        authConfig.Cognito.loginWith = {\n            ...authConfig.Cognito.loginWith,\n            email: true,\n        };\n    }\n    if (username_attributes?.includes('phone_number')) {\n        authConfig.Cognito.loginWith = {\n            ...authConfig.Cognito.loginWith,\n            phone: true,\n        };\n    }\n    if (standard_required_attributes) {\n        authConfig.Cognito.userAttributes = standard_required_attributes.reduce((acc, curr) => ({ ...acc, [curr]: { required: true } }), {});\n    }\n    return authConfig;\n}\nexport function parseAnalytics(amplifyOutputsAnalyticsProperties) {\n    if (!amplifyOutputsAnalyticsProperties?.amazon_pinpoint) {\n        return undefined;\n    }\n    const { amazon_pinpoint } = amplifyOutputsAnalyticsProperties;\n    return {\n        Pinpoint: {\n            appId: amazon_pinpoint.app_id,\n            region: amazon_pinpoint.aws_region,\n        },\n    };\n}\nfunction parseGeo(amplifyOutputsAnalyticsProperties) {\n    if (!amplifyOutputsAnalyticsProperties) {\n        return undefined;\n    }\n    const { aws_region, geofence_collections, maps, search_indices } = amplifyOutputsAnalyticsProperties;\n    return {\n        LocationService: {\n            region: aws_region,\n            searchIndices: search_indices,\n            geofenceCollections: geofence_collections,\n            maps,\n        },\n    };\n}\nfunction parseData(amplifyOutputsDataProperties) {\n    if (!amplifyOutputsDataProperties) {\n        return undefined;\n    }\n    const { aws_region, default_authorization_type, url, api_key, model_introspection, } = amplifyOutputsDataProperties;\n    const GraphQL = {\n        endpoint: url,\n        defaultAuthMode: getGraphQLAuthMode(default_authorization_type),\n        region: aws_region,\n        apiKey: api_key,\n        modelIntrospection: model_introspection,\n    };\n    return {\n        GraphQL,\n    };\n}\nfunction parseNotifications(amplifyOutputsNotificationsProperties) {\n    if (!amplifyOutputsNotificationsProperties) {\n        return undefined;\n    }\n    const { aws_region, channels, amazon_pinpoint_app_id } = amplifyOutputsNotificationsProperties;\n    const hasInAppMessaging = channels.includes('IN_APP_MESSAGING');\n    const hasPushNotification = channels.includes('APNS') || channels.includes('FCM');\n    if (!(hasInAppMessaging || hasPushNotification)) {\n        return undefined;\n    }\n    // At this point, we know the Amplify outputs contains at least one supported channel\n    const notificationsConfig = {};\n    if (hasInAppMessaging) {\n        notificationsConfig.InAppMessaging = {\n            Pinpoint: {\n                appId: amazon_pinpoint_app_id,\n                region: aws_region,\n            },\n        };\n    }\n    if (hasPushNotification) {\n        notificationsConfig.PushNotification = {\n            Pinpoint: {\n                appId: amazon_pinpoint_app_id,\n                region: aws_region,\n            },\n        };\n    }\n    return notificationsConfig;\n}\nexport function parseAmplifyOutputs(amplifyOutputs) {\n    const resourcesConfig = {};\n    if (amplifyOutputs.storage) {\n        resourcesConfig.Storage = parseStorage(amplifyOutputs.storage);\n    }\n    if (amplifyOutputs.auth) {\n        resourcesConfig.Auth = parseAuth(amplifyOutputs.auth);\n    }\n    if (amplifyOutputs.analytics) {\n        resourcesConfig.Analytics = parseAnalytics(amplifyOutputs.analytics);\n    }\n    if (amplifyOutputs.geo) {\n        resourcesConfig.Geo = parseGeo(amplifyOutputs.geo);\n    }\n    if (amplifyOutputs.data) {\n        resourcesConfig.API = parseData(amplifyOutputs.data);\n    }\n    if (amplifyOutputs.notifications) {\n        resourcesConfig.Notifications = parseNotifications(amplifyOutputs.notifications);\n    }\n    return resourcesConfig;\n}\nconst authModeNames = {\n    AMAZON_COGNITO_USER_POOLS: 'userPool',\n    API_KEY: 'apiKey',\n    AWS_IAM: 'iam',\n    AWS_LAMBDA: 'lambda',\n    OPENID_CONNECT: 'oidc',\n};\nfunction getGraphQLAuthMode(authType) {\n    return authModeNames[authType];\n}\nconst providerNames = {\n    GOOGLE: 'Google',\n    LOGIN_WITH_AMAZON: 'Amazon',\n    FACEBOOK: 'Facebook',\n    SIGN_IN_WITH_APPLE: 'Apple',\n};\nfunction getOAuthProviders(providers = []) {\n    return providers.map(provider => providerNames[provider]);\n}\nfunction getMfaStatus(mfaConfiguration) {\n    if (mfaConfiguration === 'OPTIONAL')\n        return 'optional';\n    if (mfaConfiguration === 'REQUIRED')\n        return 'on';\n    return 'off';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}